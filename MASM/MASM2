;****************************************************************************************************
; Program File:	MASM2.asm
; Program Name:	MASM2
;****************************************************************************************************
; Programmer: 		Jason Kahn
; Class:			CS3B 
; Creation Date: 	3/1/2017
; Purpose:
;		Input numeric information from the keyboard, perform addition, subtraction,
;			multiplication, and division. Check for overflow upon all operations  
;			
;****************************************************************************************************
	.486
	.model flat, stdcall
	option casemap :none

include \masm32\include\kernel32.inc
include \masm32\include\masm32.inc
includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\masm32.lib

	ExitProcess PROTO Near32 stdcall, dwExitCode:dword  			; capitalization not necessary
	putch 		PROTO near32 stdcall, bVal:byte
	ascint32  	PROTO  stdcall, lpStringToConvert:dword
	intasc32	PROTO Near32 stdcall, lpStringToHold:dword, dVal:dword
	putstring	PROTO Near32 stdcall, lpStringToPrint:dword
	getche		PROTO Near32 stdcall  ;returns character in the AL register
 	getch		PROTO Near32 stdcall  ;returns character in the AL register
	putch		PROTO Near32 stdcall, bChar:byte



	.data
strHeader				BYTE 13,10,9," Name: Jason Kahn",13,10 					;header with class information
					BYTE 9,"Class: CS3B",13,10
					BYTE 9,"  Lab: MASM2",13,10
					BYTE 9," Date: 3/6/2017",13,10,0
strExitPrompt		BYTE 13,10,9, "Thanks for using my program!! Good Day!",0
strFirstNumPrompt 	BYTE 13,10,"Enter your first number:  ",0
strSecondNumPrompt 	BYTE 13,10,"Enter your second number: ",0
strSumPrompt		BYTE 13,10,"The sum is ",0
strProductPrompt 	BYTE 13,10,"The product is ",0
strQuotientPrompt	BYTE 13,10,"The quotient is ",0
strDifferencePrompt	BYTE 13,10,"The difference is ",0
strRemainderPrompt	BYTE 13,10,"The remainder is ",0
strOverflowConv		BYTE 13,10,"OVERFLOW occurred when CONVERTING",0
strDivideZero		BYTE 13,10,"You cannot divide by 0. Thus, there is NO quotient or remainder",0
strAddingOverflow	BYTE 13,10,"OVERFLOW OCCURRED WHEN ADDING",0
strMultOverflow		BYTE 13,10,"OVERFLOW OCCURRED WHEN MULTIPLYING",0
strInvalidString 	BYTE 13,10,"INVALID NUMERIC STRING. RE-ENTER VALUE",0
strBlank			BYTE 0

cInputChar			BYTE ?
strString 			BYTE 10 dup(?)

iVal1				SDWORD ?
iVal2				SDWORD ?
iSum				SDWORD ?
iDifference			SDWORD ?
iProduct			SDWORD ?
iRemainder			SDWORD ?
iQuotient			SDWORD ?
dLimitNum			DWORD 11

strSum				DWORD ?
strDiff				DWORD ?
strProd				DWORD ?
strRemainder		DWORD ?
strDiv				DWORD ?
			
	
	
	.code
_start:
	invoke putstring, addr strHeader
	
restart:
enterFirstNum:
	invoke putstring, addr strFirstNumPrompt
	call InputFromScreen
	cmp strString[0], 13
	je finish
	jo enterFirstNum
	jnz validNumber1
	invoke putstring, addr strInvalidString
	jmp enterFirstNum

validNumber1:	
	mov iVal1,eax					;moves integer value from general purpose register, inputted by the macro
	
enterSecondNum:
	invoke putstring, addr strSecondNumPrompt
	call InputFromScreen
	cmp strString[0], 13
	je finish
	jo enterSecondNum
	jnz validNumber2
	invoke putstring, addr strInvalidString
	jmp enterSecondNum
	
validNumber2:
	mov iVal2,eax	;moves integer value from general purpose register, inputted by the macro
	
	mov eax, 0
	mov eax, iVal1
	add eax, iVal2
	jno Adding
	
	invoke putstring, addr strAddingOverflow
	or eax, 0
	jmp Difference
	
Adding:	
	mov iSum, eax
	invoke intasc32, addr strSum, iSum
	
	invoke putstring, addr strSumPrompt
	invoke putstring, addr strSum
	
Difference:
	mov eax, 0
	mov eax, iVal1
	sub eax, iVal2

	mov iDifference, eax
	invoke intasc32, addr strDiff, iDifference
	
	invoke putstring, addr strDifferencePrompt
	invoke putstring, addr strDiff
	
	mov eax, iVal1
	imul eax, iVal2
	jno Multiply
	
	invoke putstring, addr strMultOverflow
	or eax, 0
	jmp CheckDivide
	
Multiply:
	mov iProduct, eax
	invoke intasc32, addr strProd, iProduct
	invoke putstring, addr strProductPrompt
	invoke putstring, addr strProd
	
CheckDivide:
	mov EAX, 0
	mov EAX, iVal2
	cmp EAX, 0
	jne Divide
	
	invoke putstring, addr strDivideZero
	jmp finish
	
Divide:
	mov eax, iVal1
	cdq
	mov ebx, iVal2
	idiv ebx
	
	mov iQuotient, eax
	mov iRemainder, edx
	
	invoke intasc32, addr strDiv, iQuotient
	invoke intasc32, addr strRemainder, iRemainder
	
	invoke putstring, addr strQuotientPrompt
	invoke putstring, addr strDiv
	
	invoke putstring, addr strRemainderPrompt
	invoke putstring, addr strRemainder
	invoke putstring, addr strBlank

	jmp restart
	
finish:
	;invokes the exit process
	invoke putstring, addr strExitPrompt
	invoke ExitProcess, 0
	PUBLIC _start
	
InputFromScreen proc 
	mov ECX, 0
	mov ESI, 0
	
ResetInputStr:
	mov strString[ESI],0
	inc ESI
	cmp ESI, 10
	jne ResetInputStr
	
	mov ESI, 0
	
inputCharLoop:
	INVOKE getch
	cmp Al, 8
	je backSpace
	cmp AL, 13
	je OverFlowCheck
	cmp ECX, 10
	je inputCharLoop
	
	mov  strString[ESI], AL
	invoke putch, AL
	inc ESI
	inc ECX
	jmp inputCharLoop
	
backSpace:
	cmp ESI, 0
	je inputCharLoop
	invoke putch, 8
	invoke putch, strBlank
	invoke putch, 8
	dec ESI
	dec ECX
	mov strString[ESI], 0
	jmp inputCharLoop

OverFlowCheck:
	cmp ECX, 10
	jbe return
	invoke putstring, addr strOverflowConv 
	mov AL, 7Fh
	inc AL
	ret
	
return:
	invoke ascint32, addr strString	;converts string to integer 
	or eax, 0
	ret
	
InputFromScreen endp
	
END
